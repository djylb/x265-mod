name: Build

on:
  push:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Which tag to upload to'
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_cpu:
          - x86-64
          - ivybridge
          - haswell
          - skylake
          - alderlake
          - bdver4
          - znver1
          - znver2
          - znver3
          - znver4
        toolchain:
          - clang
    steps:
    - name: Checkout x265
      uses: actions/checkout@v4
      with:
        path: x265
        fetch-depth: 0

    - name: Cache FFmpeg
      id: cache-ff
      uses: actions/cache@v4
      with:
        path: ffmpeg
        key: ${{ matrix.target_cpu }}-${{ matrix.toolchain }}-ff

    - name: Checkout FFmpeg
      uses: actions/checkout@v4
      with:
        path: ffmpeg
        repository: FFmpeg/FFmpeg
        ref: n4.4
      if: steps.cache-ff.outputs.cache-hit != 'true'

    - name: Cache mimalloc
      id: cache-mi
      uses: actions/cache@v4
      with:
        path: mimalloc
        key: ${{ matrix.target_cpu }}-${{ matrix.toolchain }}-mi-v2

    - name: Checkout mimalloc
      uses: actions/checkout@v4
      with:
        path: mimalloc
        repository: AmusementClub/mimalloc2
        ref: v2.0.2-AC
      if: steps.cache-mi.outputs.cache-hit != 'true'

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build nasm p7zip-full wget

    - name: Compile FFmpeg
      run: |
        cd ffmpeg
        ./configure --enable-gpl --enable-version3 --disable-runtime-cpudetect --disable-all --disable-autodetect \
          --enable-avformat --enable-avcodec --disable-everything --disable-network \
          --enable-demuxer=mpegts,mov,matroska,h264,hevc \
          --enable-decoder=h264,hevc,ffv1,ffvhuff,huffyuv \
          --enable-protocol=file,pipe \
          --cc=clang --cxx=clang++ --cpu=${{ matrix.target_cpu }} \
          --enable-static --disable-shared
        make -j$(nproc)
      if: steps.cache-ff.outputs.cache-hit != 'true'

    - name: Install FFmpeg
      run: |
        cd ffmpeg
        sudo make install

    - name: Compile mimalloc
      run: |
        cd mimalloc
        mkdir -p build && cd build
        cmake -GNinja .. \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_POLICY_DEFAULT_CMP0069=NEW \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DMI_BUILD_SHARED=OFF \
          -DMI_BUILD_STATIC=ON \
          -DMI_BUILD_OBJECT=OFF \
          -DMI_BUILD_TESTS=OFF
        ninja
      if: steps.cache-mi.outputs.cache-hit != 'true'

    - name: Install mimalloc
      run: |
        cd mimalloc/build
        sudo ninja install

    - name: Setup build directories
      run: mkdir -p build/8b build/10b build/12b

    - name: Download profdata
      run: wget https://github.com/${{ github.repository }}/raw/profdata/x265.profdata -O x265.profdata

    - name: Compile x265 8bit
      run: |
        cd build/8b
        cmake -GNinja ../../x265/source \
          -DEXPORT_C_API=OFF \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          -DCUSTOM_TARGET_CPU=ON \
          -DTARGET_CPU=${{ matrix.target_cpu }} \
          -DUSE_MIMALLOC=ON \
          -DUSE_LTO=ON \
          -DCMAKE_ASM_NASM_FLAGS="-w-macro-params-legacy"
        ninja
        cp libx265.a ../10b/libx265_8b.a

    - name: Compile x265 12bit
      run: |
        cd build/12b
        cmake -GNinja ../../x265/source \
          -DHIGH_BIT_DEPTH=ON \
          -DMAIN12=ON \
          -DEXPORT_C_API=OFF \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          -DCUSTOM_TARGET_CPU=ON \
          -DTARGET_CPU=${{ matrix.target_cpu }} \
          -DUSE_MIMALLOC=ON \
          -DUSE_LTO=ON \
          -DCMAKE_ASM_NASM_FLAGS="-w-macro-params-legacy"
        ninja
        cp libx265.a ../10b/libx265_12b.a

    - name: Compile x265 10bit baseline
      run: |
        cd build/10b
        cmake -GNinja ../../x265/source \
          -DHIGH_BIT_DEPTH=ON \
          -DEXPORT_C_API=OFF \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          -DCUSTOM_TARGET_CPU=ON \
          -DTARGET_CPU=${{ matrix.target_cpu }} \
          -DUSE_MIMALLOC=ON \
          -DUSE_LTO=ON \
          -DCMAKE_ASM_NASM_FLAGS="-w-macro-params-legacy"
        ninja

    - name: Compile x265 10bit (with PGO)
      working-directory: build
      run: |
        cp -a 10b 10bprof
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
        cmake_flags="-GNinja ../../x265/source -DEXTRA_LIB=x265_8b.a;x265_12b.a \
          -DEXTRA_LINK_FLAGS='-L/usr/local/lib' -DLINKED_8BIT=ON -DLINKED_12BIT=ON \
          -DENABLE_HDR10_PLUS=ON -DENABLE_AVISYNTH=OFF -DENABLE_VPYSYNTH=OFF \
          -DHIGH_BIT_DEPTH=ON -DENABLE_SHARED=OFF -DENABLE_LAVF=ON -DENABLE_STATIC_LAVF=ON \
          -DCUSTOM_TARGET_CPU=ON -DTARGET_CPU=${{ matrix.target_cpu }} \
          -DUSE_MIMALLOC=ON -DUSE_LTO=ON -DCMAKE_EXE_LINKER_FLAGS='-L/usr/local/lib' \
          -DCMAKE_ASM_NASM_FLAGS='-w-macro-params-legacy'"
        cd 10b
        cmake $cmake_flags "-DCMAKE_CXX_FLAGS=-I../../ffmpeg -fprofile-instr-use=${{ github.workspace }}/x265.profdata"
        ninja
        strip -s x265
        cd ../10bprof
        cmake $cmake_flags "-DCMAKE_CXX_FLAGS=-I../../ffmpeg -fprofile-instr-generate -fprofile-update=atomic"
        ninja
        strip -s x265
        mv x265 x265-profiling


    - name: Package
      run: |
        mkdir -p dist
        cp build/10b/x265 dist/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: x265-linux-${{ matrix.target_cpu }}-${{ matrix.toolchain }}-full
        path: dist/*

    - name: Compress artifact for release
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
      run: |
        cd dist
        7z a -t7z -mx=7 ../x265-linux-${{ matrix.target_cpu }}-${{ matrix.toolchain }}.${{ github.event.inputs.tag }}.7z x265

    - name: Release
      uses: softprops/action-gh-release@v2
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
      with:
        tag_name: ${{ github.event.inputs.tag }}
        files: x265-linux-${{ matrix.target_cpu }}-${{ matrix.toolchain }}.${{ github.event.inputs.tag }}.7z
        fail_on_unmatched_files: true
        generate_release_notes: false
        prerelease: true
